[
{
	"uri": "/vi/",
	"title": "AWS RDS PostgreSQL",
	"tags": [],
	"description": "",
	"content": "Tìm hiểu về AWS RDS PostgreSQL Foundation AWS RDS PostgreSQL foundation là điều cần thiết cho bất kỳ ai muốn sử dụng AWS RDS PostgreSQL để xây dựng và chạy các ứng dụng dựa trên cơ sở dữ liệu. Nó cũng hữu ích cho những ai muốn tìm hiểu thêm về PostgreSQL hoặc cơ sở dữ liệu quan hệ nói chung.\nNội dung: Giới thiệu Nâng cấp cơ sở dữ liệu Giám sát hiệu suất Sao lưu và phục hồi Scalability Parameter Groups High Availability Tìm hiểu thêm về PostgreSQL Xóa tài nguyên "
},
{
	"uri": "/vi/3-performancemonitoringandoptimization/3-1-cloudwatchlogsalerts/",
	"title": "CloudWatch Logs &amp; Alerts",
	"tags": [],
	"description": "",
	"content": "Xem CloudWatch Logs Khi tạo cơ sở dữ liệu trong bài thực hành đầu tiên, bạn đã chọn xuất bản nhật ký lên CloudWatch. Bạn có thể tìm thấy cả cơ sở dữ liệu và nhật ký nâng cấp trong Nhóm nhật ký CloudWatch được liên kết với cơ sở dữ liệu của bạn.\nAmazon CloudWatch cho phép chúng ta tổng hợp nhật ký từ nhiều dịch vụ AWS khác nhau vào một vị trí duy nhất để giúp rút ra mối tương quan giữa các dịch vụ, như nền ứng dụng và cơ sở dữ liệu Amazon RDS.\nTruy cập giao diện của CloudWatch Logs nhập /aws/rds vào trong filter box và nhấn enter. Chọn nhóm được liên kết với cơ sở dữ liệu rds-pg-labs của bạn và xem luồng nhật ký. Tạo cảnh báo cơ sở dữ liệu RDS Quay lại giao diên Database List Nhấp vào cơ sở dữ liệu rdspg-fcj-labs để chuyển đến trang chi tiết.\nBây giờ hãy chuyển đến tab Log \u0026amp; events và nhấp vào nút **Create alarm. Tạo một cảnh báo mới như hình dưới đây.\nSend notifications : chọn Yes Send notifications to : chọn New email or SMS topic Topic name : đặt tên: AvgCPU-rdspg-fcj-labs With these recipients: nhập địa chỉ mail của bạn Metric : chọn Average of CPUUtilization Threshold : chọn \u0026gt;= 15 percent Evaluation period : default setting Name of alarm : default Bây giờ hãy truy cập vào email của bạn đã cũng cấp ở bước trên. Bạn sẽ nhận được email xác nhận trong vòng một hoặc hai phút. Xác nhận đăng ký của bạn bằng cách nhấp vào liên kết trong email. Để nhận được email cảnh báo, bạn cần phải xác nhận đăng ký của mình. Bạn sẽ nhận được email xác nhận từ Amazon SNS trong vòng 90 giây hoặc lâu hơn. Nhấp vào liên kết để xác nhận đăng ký của bạn. Chúng ta sẽ kích hoạt cảnh báo này trong phần sau.\nCuối cùng, hãy truy cập Đăng ký AWS SNS để kiểm tra trạng thái đăng ký. "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "AWS RDS PostgreSQL là gì? AWS RDS PostgreSQL là dịch vụ cơ sở dữ liệu được quản lý giúp dễ dàng thiết lập, vận hành và mở rộng quy mô cơ sở dữ liệu PostgreSQL trên cloud. RDS PostgreSQL xử lý tất cả các tác vụ liên quan đến việc quản lý cơ sở dữ liệu PostgreSQL, chẳng hạn như cung cấp phần cứng, định cấu hình cơ sở dữ liệu cũng như quản lý sao lưu và khôi phục. Lợi ích của việc sử dụng AWS RDS PostgreSQL Có nhiều lợi ích khi sử dụng AWS RDS PostgreSQL, bao gồm:\nThiết lập và quản lý dễ dàng: RDS PostgreSQL đảm nhiệm tất cả các nhiệm vụ liên quan đến việc thiết lập và quản lý cơ sở dữ liệu PostgreSQL, chẳng hạn như cung cấp phần cứng, định cấu hình cơ sở dữ liệu cũng như quản lý sao lưu và khôi phục. Điều này giúp bạn có thêm thời gian để tập trung vào việc xây dựng và duy trì các ứng dụng của mình. Khả năng mở rộng: RDS PostgreSQL có khả năng mở rộng cao, giúp dễ dàng thêm hoặc xóa tài nguyên khi cần. Điều này rất quan trọng đối với các ứng dụng cần xử lý lưu lượng truy cập tăng đột biến hoặc cần mở rộng quy mô để đáp ứng nhu cầu ngày càng tăng. Bảo mật: RDS PostgreSQL cung cấp một số tính năng bảo mật để bảo vệ dữ liệu của bạn, chẳng hạn như mã hóa khi lưu trữ và đang truyền, danh sách kiểm soát truy cập và kiểm tra. Điều này giúp bạn yên tâm khi biết rằng dữ liệu của mình được an toàn và bảo mật. Tính sẵn sàng cao: RDS PostgreSQL cung cấp tính sẵn sàng cao, vì vậy bạn có thể tin tưởng rằng cơ sở dữ liệu của mình sẽ sẵn sàng khi bạn cần. RDS PostgreSQL cung cấp các tính năng như bản sao đọc và chuyển đổi dự phòng tự động để đảm bảo rằng cơ sở dữ liệu của bạn luôn sẵn sàng. "
},
{
	"uri": "/vi/6-parametergroups/6-1-create/",
	"title": "Tạo Custom Parameter Group",
	"tags": [],
	"description": "",
	"content": " Truy cập giao diện Amazon RDS console.\nTrong ngăn điều hướng, chọn Parameter groups. Chọn Create parameter group. Tại mục Parameter group family list, chọn database engine và version cho parameter group của bạn.\nTại mục Type, chọn DB Parameter Group.\nTại mục Group name, đặt tên cho parameter group.\nTại mục Description, nhập mô tả cho parameter group.\nChọn Create. Để xác minh, trong menu RDS, hãy nhấp vào Parameter Groups ở khung bên trái hoặc trên giao diện RDS . (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể tạo custom parameter group bằng AWS CLI như dưới đây: Code\rLệnh sau tạo ra một custom parameter group:\nAWSREGION=`aws configure get region`\raws rds create-db-parameter-group \\\r--db-parameter-group-name custom-pg \\\r--db-parameter-group-family postgres15 \\\r--description \u0026#34;custom-postgres parameter group\u0026#34; \\\r--region $AWSREGION "
},
{
	"uri": "/vi/5-scalability/5-1-create/",
	"title": "Tạo Read-replica để cung cấp khả năng mở rộng đọc",
	"tags": [],
	"description": "",
	"content": "Amazon RDS Read Replicas cung cấp hiệu suất và độ bền nâng cao cho các RDS instance. Bản sao chỉ có quyền đọc giúp dễ dàng tăng quy mô theo phiên bản cao hơn giới hạn công suất một cách linh hoạt của một phiên bản CSDL cho những khối lượng công việc cơ sở dữ liệu có tần suất đọc nhiều. Bạn có thể tạo một hay nhiều bản sao của một phiên bản CSDL nguồn cho trước và phục vụ lưu lượng đọc của ứng dụng có dung lượng lớn từ nhiều bản sao dữ liệu của bạn, qua đó tăng tổng thông lượng đọc. Khi cần, cũng có thể nâng cấp bản sao chỉ có quyền đọc để trở thành phiên bản CSDL độc lập. Tìm hiểu thêm các tính năng của RDS Read replicas. Amazon RDS tạo DB instance thứ hai bằng cách sử dụng snapshot của DB instance gốc. Nó sẽ sử dụng bản sao không đồng bộ gốc của công cụ để cập nhật bản sao chỉ có quyền đọc bất cứ khi nào có thay đổi đối với DB instance nguồn. Bản sao chỉ có quyền đọc hoạt động như một DB instance chỉ cho phép các kết nối chỉ đọc; các ứng dụng có thể kết nối với một bản sao chỉ có quyền đọc giống như với bất kỳ DB instance nào.\nTìm RDS PostgreSQL instance rdspg-fcj-labs trong menu Databases và nhấp vào nút phía trước db instance. Nhấp vào Actions ở bên phải và chọn Create Read Replica. Tại mục Settings, bạn phải cung cấp DB Instance Identifier (tức là tên cho instance này). Một cái gì đó như \u0026ldquo;rdspg-fcj-labs-read\u0026rdquo;. Tại mục Instance Configurations và AWS Region, giữ các giá trị mặc định. Uncheck tùy chọn Enable storage autoscaling. Lưu ý rằng bạn có thể tùy ý chỉnh kích thước Read Replica bằng cách sử dụng cấp instance, khác với instance chính của mình. Trong trường hợp của bạn, Destination Region có thể sẽ khác với những gì bạn thấy trong ảnh chụp màn hình và điều đó không sao cả.\nTại mục Connectivity, giữ các giá trị mặc định. Giữ lại cấu hình mặc định cho Network Security.\nTại mục Availability, chọn Multi-AZ DB instance. Để đơn giản, chúng tôi sẽ để phần còn lại ở chế độ mặc định. Kéo xuống phía dưới và nhấp vào Create read replica. Sẽ mất khoảng 10 phút để tạo read replica . Cơ sở dữ liệu chính của bạn sẽ vẫn available khi điều này xảy ra.\nKhi trạng thái của read replica là available trên trang Databases (bạn có thể làm mới lại trang để xem Status mới nhất), hãy nhấp vào ead replica instance mới. Trên trang chi tiết về read replica, trước tiên hãy chú ý đến endpoint. Read replica có endpoint khác với primary instance của bạn Tiếp theo, kéo xuống để xem chi tiết bản sao. Bạn có thể thấy rằng instance chính của chúng ta đang replicating sang read replica instance. Sau đó, bạn có thể kết nối với read replica bằng endpoint của nó cũng như tên người dùng và mật khẩu giống như primary instance. Ví dụ: kết nối và thực hiện truy vấn sau để kiểm tra độ trễ sao chép giữa bản chính và bản sao:\nSELECT extract(epoch from now() - pg_last_xact_replay_timestamp()) AS replica_lag; RDS PostgreSQL cũng cho phép bạn đưa read replica thành một instance độc lập. Chúng ta sẽ làm điều đó trong bài thực hành tiếp theo.\nXin chúc mừng: Trong bài thực hành này, bạn đã thêm một read replica vào cấu hình của mình để cung cấp thêm khả năng mở rộng khả đọc cho ứng dụng của bạn.\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể tạo read replica bằng AWS CLI như dưới đây: Code\rLệnh sau tạo read replica:\nAWSREGION=`aws configure get region`\raws rds create-db-instance-read-replica \\\r--db-instance-identifier rdspg-fcj-labs-read \\\r--source-db-instance-identifier rdspg-fcj-labs \\\r--db-instance-class db.t3.medium \\\r--region $AWSREGION "
},
{
	"uri": "/vi/7-highavailability/7-1-setup/",
	"title": "Thiết lập tính sẵn sàng cao cho RDS PostgreSQL (Multi-AZ)",
	"tags": [],
	"description": "",
	"content": "Xác nhận đã cài đặt Multi-AZ cho RDS PostgreSQL Truy cập giao diện Amazon RDS console. Kéo sang bên phải phần cài đặt cơ sở dữ liệu dành cho cơ sở dữ liệu rdspg-fcj-labs của bạn để xem lại cấu hình Multi-AZ của nó. Chúng ta có thể xác nhận rằng Multi-AZ chưa được định cấu hình, vì vậy, chúng tôi cần thiết lập cơ sở dữ liệu của mình để có tính sẵn sàng cao trong phần tiếp theo.\nThiết lập tính sẵn sàng cao cho RDS PostgreSQL (Multi-AZ) Amazon RDS Multi-AZ deployments cung cấp tính sẵn sàng cao và khả năng khôi phục tự động cho cơ sở dữ liệu của bạn, giúp giảm thiểu thời gian chết của hệ thống và hạn chế mất dữ liệu trong trường hợp sự cố xảy ra. Mỗi AZ chạy trên cơ sở hạ tầng độc lập, riêng biệt về mặt vật lý và được thiết kế để có độ tin cậy cao. Khi có một sự cố xảy ra với primary instance, Amazon RDS tự động chuyển dữ liệu sang secondary instance và thay thế primary instance bằng secondary instance trong quá trình phục hồi. Việc này giúp đảm bảo rằng ứng dụng của bạn vẫn có thể tiếp tục hoạt động mà không cần thao tác thủ công để khôi phục từ một bản sao phục hồi. Trong trường hợp xảy ra lỗi cơ sở hạ tầng, Amazon RDS sẽ tự động chuyển đổi dự phòng sang bản dự phòng (hoặc sang bản sao đọc trong trường hợp Amazon Aurora), để bạn có thể tiếp tục các hoạt động của cơ sở dữ liệu ngay khi quá trình chuyển đổi dự phòng hoàn tất. Vì DB instance endpoint của bạn vẫn giữ nguyên sau khi chuyển đổi dự phòng nên ứng dụng của bạn có thể tiếp tục hoạt động cơ sở dữ liệu mà không cần can thiệp quản trị thủ công. Có thể xem thêm chi tiết here.\nĐể định cấu hình RDS PostgreSQL instance có tính sẵn sàng cao, chúng ta cần sửa đổi instance đó. Chọn rdspg-fcj-labs instance và nhấn nút Modify ở trên cùng.\nTại trang Modify DB Instance: rdspg-fcj-labs , kéo xuống phần Availability \u0026amp; durability và chọn Create a standby instance. Kéo xuống phía dưới và nhấp vào Continue. Trên cửa sổ tiếp theo, bạn sẽ nhận thấy thuộc tính Multi-AZ deployment được thay đổi thành Yes trong cột Value mới. Trong phần Scheduling of modifications, chọn Apply immediately và nhấp vào Modify DB Instance ở dưới cùng. Bây giờ instance sẽ thay đổi thành trạng thái Modifying và chúng ta cần đợi cho đến khi thao tác này hoàn tất - quá trình này thường mất khoảng 5-10 phút.\nKhi trạng thái trở lại Available, hãy nhấp vào rdspg-fcj-labs instance để xem lại cài đặt của nó. Vì vậy, chúng tôi đã định cấu hình RDS PostgreSQL instance của mình để có tính sẵn sàng cao và trong phần tiếp theo, chúng tôi sẽ kiểm tra khả năng này.\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể chuyển đổi db instance sang Multi-AZ bằng AWS CLI như minh họa bên dưới: Code\rLệnh sau chuyển đổi db instance thành Multi-AZ.\nAWSREGION=`aws configure get region`\raws rds modify-db-instance \\\r--db-instance-identifier rdspg-fcj-labs \\\r--multi-az \\\r--apply-immediately \\\r--region $AWSREGION "
},
{
	"uri": "/vi/2-databaseupgrade/2-1-automaticminorupgrade/",
	"title": "Tự động nâng cấp phiên bản nhỏ",
	"tags": [],
	"description": "",
	"content": "Khi tạo db instance, bạn sẽ thấy checkbox cho phép bật tính năng tự động nâng cấp phiên bản nhỏ như hình ảnh sau. Chúng ta có thể tìm hiểu xem tùy chọn này có được bật hay không bằng cách chạy lệnh sau:\nThay thế cơ sở dữ liệu và khu vực của bạn -query \u0026#39;DBInstances[*].AutoMinorVersionUpgrade\u0026#39; Or by going to the RDS console, clicking on the db instance and select the Maintenance \u0026amp; backups tab.\nIn this case, you have not enabled Auto minor version upgrade in the first create database.\nNow, you can enable by click Modify button, then scroll down and select Enabled Auto minor version upgrade\nA PostgreSQL DB instance is automatically upgraded during your maintenance window if the following criteria are met:\nThe DB instance has the Auto minor version upgrade option enabled. The DB instance is running a minor DB engine version that is less than the current automatic upgrade minor version. "
},
{
	"uri": "/vi/4-backuprecovery/4-1-automatedbackups/",
	"title": "Tự động sao lưu dữ liệu",
	"tags": [],
	"description": "",
	"content": "Xem lại bản sao lưu Hãy bắt đầu bằng cách xem các bản sao lưu của cơ sở dữ liệu bạn đã tạo. Bản sao lưu cơ sở dữ liệu đầy đủ được thực hiện ngay sau khi tạo cơ sở dữ liệu.\nTruy cập giao diện Amazon RDS Console Click on rdspg-fcj-labs or the instance name you specified to reveal its details. Then select the Maintenance \u0026amp; backups tab. Kéo xuống phần sao lưu tự động và xem lại chi tiết. Lưu ý sao lưu cơ sở dữ liệu và thời gian khôi phục mới nhất có thể. Nhìn vào các snapshots có sẵn cho cơ sở dữ liệu. Snapshots tự động từ bản sao lưu cơ sở dữ liệu ban đầu đó cũng xuất hiện. (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể xem các bản sao lưu của phiên bản bằng AWS CLI như dưới đây: AWS CLI\rAWSREGION=`aws configure get region`\r# List the automated backups for the instance\raws rds describe-db-instance-automated-backups \\\r--db-instance-identifier rdspg-fcj-labs \\\r--region $AWSREGION\r# List the snapshots for the instance\raws rds describe-db-snapshots \\\r--db-instance-identifier rdspg-fcj-labs \\\r--region $AWSREGION\r# Check the Latest Restorable Time (LRT) of the instance\raws rds describe-db-instances \\\r--db-instance-identifier rdspg-fcj-labs \\\r--query \u0026#39;DBInstances[].LatestRestorableTime\u0026#39; \\\r--region $AWSREGION \\\r--output text "
},
{
	"uri": "/vi/5-scalability/5-2-promote/",
	"title": "Chuyển đổi Read Replica thành instance độc lập",
	"tags": [],
	"description": "",
	"content": "Bạn có thể sử dụng Read replica promotion làm sơ đồ khôi phục dữ liệu nếu primary DB instance fail trong trường hợp cấu hình Single-AZ instance . Cách tiếp cận này bổ sung cho việc sao chép đồng bộ, tự động phát hiện lỗi và chuyển đổi dự phòng.\nTrong trường hợp xảy ra lỗi, hãy làm như sau:\nChuyển đổi read replica. Chuyển lưu lương của database đến promoted DB instance. Tạo một read replica thay thế với DB instance được chuyển đổi làm primary db. Truy cập giao diện Amazon RDS console , chọn rdspg-fcj-labs-read instance của bạn.\nChúng ta cần kiểm tra xem Replica Lag có gần bằng 0 hay không để giảm thiểu việc mất dữ liệu do các giao dịch bị thiếu từ primary instance. Khi chúng ta chắc chắn rằng độ trễ là tối thiểu, chúng ta quay lại RDS console, chọn replica instance và bắt đầu chuyển đổi: trong menu Actions, chọn Promote: Trong trang Settings, bạn có thể để các cài đặt mặc định như Enable automated backups và nhấp vào Promote Read Replica. Quá trình chuyển đổi có thể mất vài phút hoặc lâu hơn để hoàn thành, tùy thuộc vào kích thước của read replica. Replica instance sẽ chuyển sang trạng thái Modifying trong thời gian đó.\nSau đó, bản sao sẽ trạng thái available và được hiển thị dưới dạng instance độc lập. (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể chuyển đổi read replica bằng AWS CLI như dưới đây: Code\rLệnh sau tạo read replica:\nAWSREGION=`aws configure get region`\raws rds promote-read-replica \\\r--db-instance-identifier rdspg-fcj-labs-read \\\r--backup-retention-period 1 \\\r--region $AWSREGION "
},
{
	"uri": "/vi/4-backuprecovery/4-2-modifybackups/",
	"title": "Điều chỉnh bản sao lưu",
	"tags": [],
	"description": "",
	"content": "Điều chỉnh Backup window và Backup retention Backup window: Backup window là khoảng thời gian mà hệ thống sao lưu dữ liệu hoặc ứng dụng được chạy để tạo bản sao lưu Backup retention: Backup retention là khoảng thời gian mà các bản sao lưu được lưu trữ và giữ lại trước khi chúng bị xóa hoặc thay thế bằng các bản sao lưu mới hơn. Tiếp theo, chúng tôi sẽ thay đổi thời gian sao lưu thành 22:30 (UTC) và đặt thời gian lưu giữ bản sao lưu thành 3 ngày.\nỞ phía trên bên phải của màn hình, chọn Modify Trên trang Mondify DB Instance, kéo xuống phần sao lưu trong phần \u0026ldquo;Additional Configuraiton\u0026rdquo;. Sử dụng menu kéo xuống để thay đổi thời gian lưu giữ bản sao lưu thành 3 ngày. Thời gian lưu giữ tối đa để sao lưu tự động là 35 ngày. Manual snapshots có thể được giữ lại vô thời hạn\nCập nhật thời gian sao lưu diễn ra lúc 22:30 (UTC), vì vậy hãy lên kế hoạch cho phù hợp Khi bạn đã thực hiện những thay đổi thích hợp, hãy nhấp vào nút tiếp tục. Xác nhận các sửa đổi trên màn hình tiếp theo và chọn tùy chọn Apply immediately. Nhấp vào Modify DB Instance Khi các thay đổi đang được áp dụng, bạn sẽ được đưa trở lại trang database instance . Lưu ý: thời gian bắt đầu chính xác của quá trình sao lưu sẽ được chọn ngẫu nhiên trong khoảng thời gian 30 phút.\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể thay đổi thời gian sao lưu của db instance bằng cách sử dụng AWS CLI như hiển thị bên dưới:\nAWS CLI\rAWSREGION=`aws configure get region`\raws rds modify-db-instance \\\r--db-instance-identifier rds-pg-labs \\\r--preferred-backup-window 22:00-22:30 \\\r--apply-immediately \\\r--region $AWSREGION "
},
{
	"uri": "/vi/6-parametergroups/6-2-modify/",
	"title": "Điều chỉnh Custom Parameter Group",
	"tags": [],
	"description": "",
	"content": "Để sửa đổi Custom Parameter Group trong Amazon RDS, bạn có thể sử dụng AWS Console, AWS CLI hoặc AWS SDK.\nSử dụng AWS Console\nTruy cập giao diện Amazon RDS console.\nTại ngăn điều hướng, chọn Parameter groups.\nChọn parameter group mà bạn muốn sửa đổi.\nDưới Actions, chọn Edit. Trong hộp tìm kiếm parameters, hãy tìm tham số log_connections. Click vào cột Values. Thay đổi giá trị thành 1 và nhấp vào Save changes.\nBây giờ hãy xóa hộp tìm kiếm và tìm tham số khác bằng cách nhập log_min_duration_statement. Trong hộp Values, nhập 4000. Click Save changes.\nLưu ý nếu bạn nhận được thông báo lỗi như “Error saving: This parameter group cannot be modified because it is currently being applied to DB Instance”, vui lòng đợi vài phút và thử lại.\nNhấp vào hộp kiểm tra đối với nhóm tham số mới và đi tới menu actions của Parameter group (ở trên cùng bên phải), chọn Compare. Xác minh các thay đổi từ nhóm tham số mặc định và sau đó nhấp vào Close. (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể sửa đổi custom parameter group bằng AWS CLI như dưới đây: Code\rLệnh sau sửa đổi custom parameter group:\nAWSREGION=`aws configure get region`\raws rds modify-db-parameter-group \\\r--db-parameter-group-name custom-pg \\\r--parameters \u0026#34;ParameterName=\u0026#39;log_connections\u0026#39;,ParameterValue=1,ApplyMethod=immediate\u0026#34; \u0026#34;ParameterName=\u0026#39;log_min_duration_statement\u0026#39;,ParameterValue=4000,ApplyMethod=immediate\u0026#34; \\\r--region $AWSREGION "
},
{
	"uri": "/vi/7-highavailability/7-2-connect/",
	"title": "Kết nối đến Multi-AZ endpoint",
	"tags": [],
	"description": "",
	"content": "RDS PostgreSQL cung cấp cho khách hàng tùy chọn mô phỏng lỗi AZ và Tính sẵn sàng cao bằng cách cung cấp tùy chọn khởi động lại Postgres Instance bằng tùy chọn chuyển đổi dự phòng. Tùy chọn này sẽ bắt đầu chuyển đổi dự phòng cấp AZ cho Instance, Instance trên AZ phụ sẽ trở thành Instance chính và Instance trên AZ chính sẽ trở thành Instance phụ mới.\nTrong EC2 instance terminal, hãy nhập và chạy các lệnh này để hiển thị kết nối với cơ sở dữ liệu trong khoảng thời gian 10 giây: while true;\rdo\rpsql -h rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com -U masteruser pglab; echo -e \u0026#34;\\n\\n\u0026#34;\rsleep 10\rdone Quan sát output dưới đây. Output này hiển thị cho bạn địa chỉ IP hiện tại của RDS PostgreSQL instance chính. Trong nhiệm vụ tiếp theo, chúng tôi sẽ thực hiện chuyển đổi dự phòng và quan sát sự thay đổi trong địa chỉ IP khi instance chính thay đổi. Hiện tại, hãy để terminal này mở và để vòng lặp lệnh chạy. Tiến hành nhiệm vụ tiếp theo. Cấu hình Event subscription cho Failover event Để nhận thông báo về các sự kiện Failover (hoặc các sự kiện khác), chúng tôi tạo RDS Event subscription cho bài lab này.\nTruy cập giao diện Amazon RDS console và chọn Event Subscriptions.\nChọn Create event subscription. Chúng ta sử dụng email subscription trong ví dụ này - để nhận thông báo qua email bạn cung cấp: Và chọn rdspg-fcj-labs instance từ danh sách hoặc sử dụng tùy chọn All instances và chọn Failover event: Trước khi có thể bắt đầu nhận thông báo sự kiện qua email, bạn cần phải xác minh địa chỉ email của mình. Bạn sẽ nhận được email xác minh ngay sau khi tạo đăng ký. (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể tạo Event Subscription bằng AWS CLI như dưới đây: Code\rĐoạn code sau tạo SNS Topic và RDS Event Subscription.\nAWSREGION=`aws configure get region`\r# Tạo SNS Topic cho Event Subscription\rSNSTOPICARN=$(aws sns create-topic \\\r--name rdspg-fcj-email \\\r--region $AWSREGION \\\r--output text)\r# Đăng ký ID E-mail cho SNS Topic\raws sns subscribe \\\r--topic-arn $SNSTOPICARN \\\r--protocol email \\\r--no-return-subscription-arn \\\r--notification-endpoint fcj@gmail.com \\\r--region $AWSREGION\r# Tạo RDS Event Subscription\raws rds create-event-subscription \\\r--subscription-name subscr-rdspg-fcj-labs \\\r--sns-topic-arn $SNSTOPICARN \\\r--source-type db-instance \\\r--event-categories failover \\\r--source-ids rdspg-fcj-labs \\\r--region $AWSREGION \\\r--enabled "
},
{
	"uri": "/vi/2-databaseupgrade/",
	"title": "Nâng cấp cơ sở dữ liệu",
	"tags": [],
	"description": "",
	"content": "\rChương này giả định rằng bạn đã tạo một RDS PostgreSQL instance trong bài thực hành đầu tiên.\nBài thực hành này sẽ giúp bạn hiểu về quy trình nâng cấp của RDS PostgreSQL instance.\nNội dung: Tự động nâng cấp phiên bản nhỏ Nâng cấp engine version Kiểm tra quá trình nâng cấp "
},
{
	"uri": "/vi/2-databaseupgrade/2-2-upgradingtheengineversion/",
	"title": "Nâng cấp engine version",
	"tags": [],
	"description": "",
	"content": "Minor version upgrades chỉ bao gồm những thay đổi tương thích ngược với các ứng dụng hiện có.\nNếu PostgreSQL DB instance của bạn đang sử dụng Read Replicas, bạn phải nâng cấp tất cả các Read Replicas trước khi nâng cấp phiên bản nguồn. Bạn có thể làm theo các hướng dẫn tương tự bên dưới nhưng hãy áp dụng chúng trước để đọc bản sao.\nNếu phiên bản DB của bạn đang triển khai Multi-AZ thì cả bản sao trình ghi và bản sao dự phòng đều được nâng cấp. Phiên bản DB của bạn có thể không khả dụng cho đến khi quá trình nâng cấp hoàn tất.\nHãy nâng cấp db instance của chúng ta ngay bây giờ.\nTrong ngăn điều hướng, hãy chọn Databases, sau đó chọn DB instance mà bạn muốn nâng cấp.\nChọn Modify. Trang Modify DB Instance sẽ xuất hiện. Tại mục DB engine version, chọn phiên bản mới. Chọn Continue và kiểm tra tóm tắt các sửa đổi. Để áp dụng các thay đổi ngay lập tức, hãy chọn Apply immediately.\nTrên trang xác nhận, hãy xem lại các thay đổi của bạn. Nếu đúng, hãy chọn Modify DB Instance để lưu các thay đổi của bạn. Bạn có thể thấy phiên bản của mình đang được nâng cấp bằng cách quay lại trang RDS instance. (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể nâng cấp phiên bản bằng cách sử dụng AWS CLI như hiển thị bên dưới: AWS CLI\rLệnh sau nâng cấp lên phiên bản 15.4.\r```\raws rds modify-db-instance --db-instance-identifier \u0026lt;your database name\u0026gt; --engine-version 15.4 --apply-immediately --region \u0026lt;your region\u0026gt;\r```\r"
},
{
	"uri": "/vi/3-performancemonitoringandoptimization/3-2-createsomedbactivity/",
	"title": "Tạo một số hoạt động cho cơ sở dữ liệu ",
	"tags": [],
	"description": "",
	"content": "Tạo một số hoạt động cho cơ sở dữ liệu Sử dụng MobaXterm để kết nối đến app server mà bạn đã tạo tại workshop 1\nSau đó chạy lệnh sau để tạo một số hoạt động trên RDS instance của bạn.\npgbench -i --fillfactor=90 --scale=500 --host=rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com --username masteruser pglab Thao tác này sẽ tạo một cơ sở dữ liệu mới có tên pglab trên PostgreSQL server tại rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com và điền vào đó kích thước gấp 500 lần dữ liệu thử nghiệm mặc định. Dữ liệu thử nghiệm sẽ được chèn với hệ số lấp đầy (fill factor) là 90%, nghĩa là mỗi trang của cơ sở dữ liệu sẽ được lấp đầy tới 90% dung lượng trước khi chuyển sang trang tiếp theo.\nKhi lệnh pgbench bắt đầu, bạn có thể chuyển sang phần tiếp theo.\n"
},
{
	"uri": "/vi/6-parametergroups/6-3-apply/",
	"title": "Áp dụng Custom Parameter Group",
	"tags": [],
	"description": "",
	"content": "Bây giờ chúng ta sẽ áp dụng Custom Parameter Group cho các phiên bản chính và bản sao của mình.\nNhấp vào menu Databases ở bên trái và chọn nút rdspg-fcj-labs và nhấp vào Modify ở trên cùng.\nKéo xuống Additional Configuration-\u0026gt;TDatabase options và chọn custom parameter group mà bạn đã tạo trước đó trong tài khoản của mình (ví dụ: custom-pg) như hiển thị bên dưới. Kéo xuống phía dưới và nhấp vào Continue.\nỞ phần tiếp theo bạn chọn Apply Immediately như hình bên dưới. Chọn nút radio bên cạnh DB identifier rdspg-fcj-labs như hiển thị bên dưới và xác minh rằng Status của cơ sở dữ liệu là Modifying. Một số thay đổi tham số nhất định yêu cầu khởi động lại RDS instance, do đó bạn có thể xác minh xem có cần khởi động lại hay không bằng cách chọn primary instance rdspg-fcj-labs và trong tab Configuration, ở phía dưới bên trái đối diện với nhóm tham số đã sửa đổi (custom-pg) bạn sẽ thấy Pending reboot được viết cho biết cần phải khởi động lại phiên bản để áp dụng các thay đổi. Vì vậy, bạn sẽ phải khởi động lại các instances để Parameter group hoạt động ( In-sync ).\nBằng cách chọn cơ sở dữ liệu rdspg-fcj-labs và bằng cách vào tab Configuration, giờ đây bạn có thể thấy sau khi khởi động lại instances, parameter group hiển thị là In Sync. (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể áp dụng nhóm tham số tùy chỉnh bằng AWS CLI như dưới đây: Code\rLệnh sau để áp dụng custom parameter group.\nAWSREGION=`aws configure get region`\r# Sửa đổi instance và thay đổi parameter group\raws rds modify-db-instance \\\r--db-instance-identifier rdspg-fcj-labs \\\r--db-parameter-group-name custom-pg \\\r--apply-immediately \\\r--region $AWSREGION\r# Reboot instance aws rds reboot-db-instance \\\r--db-instance-identifier rdspg-fcj-labs \\\r--region $AWSREGION Bạn có thể xác minh các thay đổi tham số từ câu lệnh psql. Để làm như vậy, hãy kết nối với instance:\npsql -h rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com -U masteruser pglab Sau đó chạy các lệnh sau\nshow log_connections;\rshow log_min_duration_statement; Output sẽ trông như dưới đây:\nChúc mừng, bạn đã hoàn thành xong bài thực hành về Parameter Groups.\n"
},
{
	"uri": "/vi/3-performancemonitoringandoptimization/3-3-reviewingperformance/",
	"title": "Đánh giá hiệu năng",
	"tags": [],
	"description": "",
	"content": "Giờ đây khi đã có khối lượng công việc chạy trên cơ sở dữ liệu AWS RDS PostgreSQL, chúng ta có thể xem xét các số liệu và bảng thông tin có sẵn trong CloudWatch và tìm hiểu sâu hơn với Performance Insights.\nTại RDS console], hãy điều hướng đến trang Database. Để xem số liệu CloudWatch, hãy nhấp vào tab Monitoring. Khám phá nhiều biểu đồ khác nhau. Bạn có thể hiển thị biểu đồ ở chế độ toàn màn hình và có quyền truy cập vào các tùy chỉnh khác nhau của biểu đồ. Để xem các số liệu Enhanced monitoring, hãy nhấp vào nút Monitoring ở bên phải màn hình và chọn Enhanced monitoring và khám phá các biểu đồ khác nhau. Bây giờ hãy tìm Performance Insights trong RDS console. Nhấp chuột phải vào liên kết và mở Performance Insights trong tab trình duyệt mới. Chọn database instance của bạn và bạn sẽ thấy dữ liệu đang được tạo trên RDS instance của bạn Tìm hiểu các chế độ chờ khác nhau (waits) trong Performance Insights Tiếp theo, chúng ta sẽ tải 1 lượng dữ liệu lớn lên cơ sở dữ liệu và truy cập lại các trang tổng quan này.\n"
},
{
	"uri": "/vi/3-performancemonitoringandoptimization/",
	"title": "Giám sát hiệu suất",
	"tags": [],
	"description": "",
	"content": "Giám sát tình trạng và hiệu suất cơ sở dữ liệu của bạn là một nhiệm vụ quan trọng. Trong phần thực hành này, bạn sẽ đặt cấu hình tự động cảnh báo cho một trong các số liệu về hiệu năng của cơ sở dữ liệu. Sau đó, bạn sẽ chạy khối lượng công việc được tạo dựa trên cơ sở dữ liệu Postgres của mình. Từ đó, bạn sẽ xem số liệu về hiệu năng trong RDS console và phân tích số liệu bằng công cụ RDS Performance Insights.\nAmazon RDS cung cấp số liệu CloudWatch cho db instance của bạn mà không mất thêm phí. Bạn có thể sử dụng RDS Management Console để xem các số liệu vận hành chính, bao gồm mức compute/memory/storage capacity utilization, I/O activity và instance connections. Amazon RDS cũng cung cấp tính năng Enhanced Monitoring, cung cấp quyền truy cập vào hơn 50 số liệu, bao gồm CPU, memory, file system, và disk I/O; và Performance Insights, một công cụ dễ sử dụng giúp bạn nhanh chóng phát hiện các vấn đề về hiệu năng.\nNội dung CloudWatch Logs và Alerts Tạo một số hoạt động cho cơ sở dữ liệu Đánh giá hiệu năng Kiểm tra khả năng chịu tải của cơ sở dữ liệu Kiểm tra khả năng chịu tải nhanh hơn "
},
{
	"uri": "/vi/2-databaseupgrade/2-3-validatetheupgradeprocess/",
	"title": "Kiểm tra quá trình nâng cấp",
	"tags": [],
	"description": "",
	"content": "Sau vài phút bạn sẽ thấy cơ sở dữ liệu đã hoàn tất quá trình nâng cấp và trạng thái sẽ trở lại Available. Nhấp vào instance, sau đó nhấp vào tab Configuration và bạn sẽ thấy database engine version đã chuyển từ 15.3 sang 15.4. Hoặc nếu bạn thích sử dụng lệnh CLI hơn, hãy nhập vào bảng điều khiển:\naws rds describe-db-instances --db-instance-identifier \u0026lt; your database name \u0026gt; --region \u0026lt; your region \u0026gt; --query DBInstances[*].EngineVersion Bạn có thể thấy engine version sau khi chạy lệnh trên: "
},
{
	"uri": "/vi/5-scalability/5-3-perform/",
	"title": "Perform vertical scaling",
	"tags": [],
	"description": "",
	"content": " Truy cập giao diện Amazon RDS console.\nChọn rdspg-fcj-labs instance và click Modify.\nTại trang Modify DB Instance - Chọn DB instance class or DB instance size: thích hợp. Sau đó click Continue\nTại Summary of modifications chú ý instance type thay đổi và chọn Apply immediately để áp dụng các thay đổi và nhấp vào Modify DB instance.\nInstacnce sẽ bắt đầu quá trình nâng cấp DB instance, quá trình này có thể mất 10-15 phút, sau đó bạn sẽ thấy trong RDS console instance đã cập nhật:\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể mở rộng quy mô instance bằng AWS CLI như dưới đây: Code\rLệnh sau thay đổi instance class của instance.\nAWSREGION=`aws configure get region`\raws rds modify-db-instance \\\r--db-instance-identifier rds-pg-labs \\\r--db-instance-class db.t3.large \\\r--apply-immediately \\\r--region $AWSREGION "
},
{
	"uri": "/vi/4-backuprecovery/4-3-manualsnapshots/",
	"title": "Snapshots thủ công",
	"tags": [],
	"description": "",
	"content": "Thực hiện sao lưu thủ công cơ sở dữ liệu của bạn. Ngoài các bản sao lưu cơ sở dữ liệu tự động, đôi khi bạn muốn thực hiện một bản sao lưu cụ thể của cơ sở dữ liệu, ngay trước khi phát hành phần mềm lớn hoặc để làm mới môi trường tổ chức của mình. Với AWS RDS, những bản sao lưu này được gọi là snapshots thủ công. RDS tạo storage volume snapshot của DB instance, sao lưu toàn bộ DB instance chứ không chỉ các cơ sở dữ liệu riêng lẻ. Chúng được lưu trữ trong Amazon S3 nhưng chúng không nằm trong vùng lưu trữ mà khách hàng có thể truy cập.\nVới instance của bạn được chọn từ danh sách cơ sở dữ liệu. Chọn Actions -\u0026gt; Take Snapshot Trên màn hình Take DB Snapshot, nhập tên cho snapshot của bạn (ví dụ: manual-snapshot-rdspg-fcj-labs) và nhấp vào Take Snapshot. Khi tạo snapshot, bạn sẽ được đưa đến trang Snapshots trong AWS RDS Console. Hãy đi tới danh sách cơ sở dữ liệu và xem trạng thái của instance. Bạn sẽ thấy nó sao lưu. Sau khi trạng thái cơ sở dữ liệu trở về available hãy quay lại danh sách snapshots . Xem lại tất cả các snapshots. (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể snapshot thủ công instance bằng AWS CLI như dưới đây:\nAWS CLI\rLệnh sau sẽ snapshot thủ công instance.\nAWSREGION=`aws configure get region`\raws rds create-db-snapshot \\\r--db-instance-identifier rdspg-fcj-labs \\\r--db-snapshot-identifier manual-snapshot-rdspg-fcj-labs \\\r--region $AWSREGION "
},
{
	"uri": "/vi/7-highavailability/7-3-perform/",
	"title": "Thực hiện chuyển đổi dự phòng để xác minh tính sẵn sàng cao",
	"tags": [],
	"description": "",
	"content": "RDS PostgreSQL cung cấp cho khách hàng tùy chọn mô phỏng lỗi AZ và Tính sẵn sàng cao bằng cách cung cấp tùy chọn khởi động lại PostgreSQL instance bằng tùy chọn chuyển đổi dự phòng. Tùy chọn này sẽ bắt đầu chuyển đổi dự phòng cấp AZ cho instance - instance trong AZ phụ sẽ trở thành instance chính và instance trong AZ chính sẽ trở thành instance phụ mới.\nTruy cập giao diện Amazon RDS console và chọn rdspg-fcj-labs instance. Click vào Actions và chọn Reboot. Đảm bảo kiểm tra tùy chọn Reboot With Failover, và click Reboot. Tiếp theo, nhấp vào tab Logs \u0026amp; Events để kiểm tra trạng thái chuyển đổi dự phòng. Quan sát sự thay đổi của các sự kiện khi quá trình chuyển đổi dự phòng trải qua các bước khác nhau. Bây giờ, hãy quay lại với terminal của EC2 instance, nơi lệnh vòng lặp while vẫn đang chạy. Bạn sẽ nhận thấy sự thay đổi trong địa chỉ IP như hình bên dưới. Bạn cũng sẽ nhận thấy một thông báo ngắn gọn về sự gián đoạn ngay trong thời điểm chuyển đổi dự phòng. Sau khi phiên bản cơ sở dữ liệu khả dụng trở lại và hoạt động đối với cơ sở dữ liệu hoàn tất thành công. Cũng lưu ý rằng RDS endpoint đã bắt đầu phân giải thành địa chỉ IP mới (từ một AZ khác)\n(Note: In your lab the IP will be different).\nBạn cũng sẽ thấy status và AZ trong Amazon RDS service console được cập nhật khi quá trình chuyển đổi dự phòng diễn ra nhưng có thể có độ trễ ngắn trước khi status và AZ được làm mới.\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể khởi động lại instane với chuyển đổi dự phòng bằng AWS CLI như dưới đây: Code\rLệnh sau khởi động lại instane có chuyển đổi dự phòng.\nAWSREGION=`aws configure get region`\raws rds reboot-db-instance \\\r--db-instance-identifier rdspg-fcj-labs \\\r--region $AWSREGION \\\r--force-failover "
},
{
	"uri": "/vi/5-scalability/5-4-migrating/",
	"title": "Di chuyển sang DB Multi-AZ cluster bằng read replica",
	"tags": [],
	"description": "",
	"content": "Amazon RDS Read Replicas cung cấp hiệu suất và độ bền nâng cao cho các RDS instance. Bản sao chỉ có quyền đọc giúp dễ dàng tăng quy mô theo phiên bản cao hơn giới hạn công suất một cách linh hoạt của một phiên bản CSDL cho những khối lượng công việc cơ sở dữ liệu có tần suất đọc nhiều. Bạn có thể tạo một hay nhiều bản sao của một phiên bản CSDL nguồn cho trước và phục vụ lưu lượng đọc của ứng dụng có dung lượng lớn từ nhiều bản sao dữ liệu của bạn, qua đó tăng tổng thông lượng đọc. Khi cần, cũng có thể nâng cấp bản sao chỉ có quyền đọc để trở thành phiên bản CSDL độc lập. Tìm hiểu thêm các tính năng của RDS Read replicas.\nAmazon RDS tạo DB instance thứ hai bằng cách sử dụng snapshot của primary db instance. Nó sẽ sử dụng bản sao không đồng bộ gốc của công cụ để cập nhật read replica bất cứ khi nào có thay đổi đối với primary db instance. Read replica hoạt động như một phiên bản DB chỉ cho phép các kết nối chỉ đọc; các ứng dụng có thể kết nối với read replica giống như với bất kỳ DB instance nào.\nĐể di chuyển Single-AZ deployment hoặc Multi-AZ DB instance deployment sang Multi-AZ DB cluster deployment với thời gian ngừng hoạt động giảm xuống, bạn có thể tạo Multi-AZ DB cluster read replica. Vui lòng truy cập Làm việc với Multi-AZ DB cluster read replicas để biết thêm chi tiết.\nTìm RDS PostgreSQL instance rdspg-fcj-labs trong Databases và nhấp vào nút phía trước DB Instance. Nhấp vào menu Actions ở bên phải và chọn Create Read Replica Tại mục Settings, bạn phải cung cấp DB Instance Identifier (i.e. the name for this instance). Tại mục Availability, chọn Multi-AZ DB Cluster - tùy chọn triển khai mới. Để đơn giản, chúng ta sẽ để phần còn lại ở chế độ mặc định. Kéo xuống phía dưới và nhấp vào Create read replica\nSau khi nhấp vào Create read replica, bạn sẽ được đưa trở lại trang Databases. Làm mới trang và bạn sẽ thấy read replica đang được tạo. Sẽ mất khoảng 10 phút để tạo read replica của bạn. Primary database của bạn tiếp tục có available khi điều này xảy ra.\nKhi trạng thái của Read Replica là Available trên trang Databases, hãy nhấp vào Read Replica mới. Trên trang chi tiết về Multi-AZ DB replica cluster, trước tiên hãy chú ý đến các endpoint. Bản sao có các endpoint khác với primary instance của bạn. Tiếp theo, kéo xuống để xem chi tiết bản sao. Bạn có thể thấy rằng primary instance của chúng ta đang sao chép sang read replica instance của chúng ta. Sau đó, bạn có thể kết nối với read replica bằng endpoint của nó cũng như tên người dùng và mật khẩu giống như primary instance. Ví dụ: kết nối và thực hiện truy vấn sau để kiểm tra độ trễ sao chép giữa nguồn và bản sao:\nSELECT extract(epoch from now() - pg_last_xact_replay_timestamp()) AS replica_lag; Bạn cũng có thể nâng cấp Multi-AZ read replica cluster này thành một cụm độc lập. Chúng tôi sẽ làm điều đó trong bước tiếp theo.\nClick vào Actions, và chọn Promote để tách ra và chuyển đối rdspg-fcj-labs-read-test Multi-AZ DB Cluster bằng cách chọn Promote read replica Sẽ mất khoảng 1-2 phút để read replica của bạn được tách ra và được chuyển đổi dưới dạng RDS DB Cluster với tùy chọn Multi-AZ DB Cluster deployment.\nTại thời điểm này, bạn đã di chuyển thành công RDS PostgreSQL instance có chế độ Multi-AZ DB Instance deployment sang tùy chọn RDS PostgreSQL Multi-AZ DB Cluster deployment.\nXin chúc mừng: Trong bài thực hành này, bạn đã thêm một Multi-AZ DB Cluster read replica instance vào cấu hình của mình để di chuyển ứng dụng/cơ sở dữ liệu từ Multi-AZ DB Instance deployment sang Multi-AZ DB Cluster deployment.\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể chuyển đổi read replica bằng AWS CLI như dưới đây: Code\rLệnh sau đây tạo ra read replica:\nARN=`aws rds describe-db-instances --db-instance-identifier rdspg-fcj-labs --query \u0026#39;DBInstances[].DBInstanceArn\u0026#39; --output text --region $AWSREGION`\raws rds create-db-cluster \\\r--db-cluster-identifier rdspg-fcj-labs-read-test \\\r--engine postgres \\\r--replication-source-identifier $ARN \\\r--db-cluster-instance-class db.r5d.large \\\r--storage-type io1 --iops 1000 \\\r--region $AWSREGION aws rds promote-read-replica-db-cluster \\\r--db-cluster-identifier rdspg-fcj-labs-read-test "
},
{
	"uri": "/vi/4-backuprecovery/4-4-restoresnapshot/",
	"title": "Khôi phục Snapshot",
	"tags": [],
	"description": "",
	"content": "Khôi phục từ snapshot thủ công Các bản sao lưu cơ sở dữ liệu có rất ít giá trị trừ khi chúng có thể được sử dụng để khôi phục cơ sở dữ liệu. Trong phần này, chúng ta sẽ dùng snapshot thủ công vừa tạo và khôi phục cơ sở dữ liệu PostgreSQL.\nChọn snapshot bạn đã tạo ở phần trước từ danh sách và chọn Actions, sau đó nhấp vào Restore Snapshot Khi khôi phục từ snapshot, db instance RDS mới được tạo, instance gốc sẽ tiếp tục chạy bình thường\nHoàn tất trang Restore DB Instance bằng cách sử dụng các giá trị mặc định ngoại trừ DB Instance Identifier nơi bạn có thể nhập rdspg-fcj-labs-restore-manual-snapshot, Chọn db.t3.meidum làm instance type rồi chọn Restore DB Instance ở cuối biểu mẫu. Khi quá trình khôi phục bắt đầu, bạn sẽ được đưa đến danh sách cơ sở dữ liệu. Bạn có thể theo dõi trạng thái khôi phục và làm mới danh sách cho đến khi trạng thái của cơ sở dữ liệu được khôi phục là Available.\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể khôi phục một instance từ snapshot thủ công bằng AWS CLI như minh họa bên dưới: AWS CLI\rThe following command takes a manual snapshot of the instance.\nAWSREGION=`aws configure get region`\raws rds restore-db-instance-from-db-snapshot \\\r--db-instance-identifier rdspg-fcj-labs-restore-manual-snapshot \\\r--db-snapshot-identifier manual-snapshot-rdspg-fcj-labs \\\r--db-instance-class db.t3.medium \\\r--region $AWSREGION "
},
{
	"uri": "/vi/3-performancemonitoringandoptimization/3-4-databaseloadtest/",
	"title": "Kiểm tra khả năng chịu tải của cơ sở dữ liệu",
	"tags": [],
	"description": "",
	"content": "kiểm tra hiệu năng chịu tải của cơ sở dữ liệu (database) trong điều kiện tải cao. Bây giờ, hãy chạy khối lượng công việc giao dịch kiểm tra sức chịu tải trên RDS database instance. Khối lượng công việc này sẽ mở ra 200 kết nối tới cơ sở dữ liệu của bạn và mỗi kết nối đó sẽ liên tục cập nhật các bảng. Để khởi chạy khối lượng công việc giao dịch, hãy quay lại AWS CLI và chạy lệnh này:\npgbench --host \u0026lt;your database endpoint\u0026gt;--username masteruser --protocol=prepared -P 30 --time=300 --client=200 --jobs=200 \u0026lt;your database name\u0026gt; Điều này sẽ bắt đầu 200 client sessions và đồng thời thực thi pgbench benchmark dựa trên cơ sở dữ liệu được chỉ định bởi tham số \u0026lt;tên cơ sở dữ liệu của bạn\u0026gt;. Benchmark sẽ chạy trong 300 giây và kết quả sẽ được in ra.\nHãy cùng xem lại một số trang tổng quan mà chúng ta đã xem xét ở phần trước.\nBắt đầu bằng cách xem tab monitoring. Bạn sẽ thấy một số thay đổi trong dữ liệu khi load test, ví dụ: bây giờ bạn sẽ thấy số lượng kết nối cơ sở dữ liệu tăng lên đáng kể. Chúng ta hãy truy cập vào Performance Insights và xem các biểu đồ khác nhau khi thực hiện kiểm tra chịu tải.\nCounter metrics Database load Top SQL Lưu ý rằng trong ví dụ trên, có một vùng lớn màu xanh da trời trên biểu đồ tải Cơ sở dữ liệu. Vùng màu xanh da trời tương ứng với một số lượng lớn các phiên cơ sở dữ liệu đang chờ trong sự kiện WALWriteLock \u0026amp; DataFileRead.\nTừ quan điểm tối ưu hóa hiệu suất, nếu chúng tôi có thể tìm ra cách giảm số phiên chờ trong sự kiện WALWriteLock \u0026amp; DataFileRead, khối lượng công việc của chúng tôi có thể chạy nhanh hơn. Bạn có thể tìm hiểu thêm về Performance Insights tại đây .\nKiểm tra email của bạn. Bạn sẽ đã nhận được thông báo qua email về cảnh báo CPU Utilization mà bạn đã thiết lập trước đó ở bài thực hành này. "
},
{
	"uri": "/vi/4-backuprecovery/",
	"title": "Sao lưu và phục hồi",
	"tags": [],
	"description": "",
	"content": "Understanding how your database is backed up and options for recovery are critically important before moving database workloads to the cloud. In this lab will take a look at the backup and recovery functions available in RDS for PostgreSQL.\nThis lab contains following tasks: Tự động sao lưu dữ liệu Điều chỉnh bản sao lưu Snapshots thủ công Khôi phục Snapshot Point in Time Restore AWS Backup "
},
{
	"uri": "/vi/3-performancemonitoringandoptimization/3-5-makeyourloadtestrunfaster/",
	"title": "Kiểm tra khả năng chịu tải nhanh hơn",
	"tags": [],
	"description": "",
	"content": " Trong bài tập này, chúng tôi sẽ chỉ cho bạn cách làm cho khối lượng giao dịch của bạn nhanh hơn. Nhanh hơn có nghĩa là chúng tôi muốn hoàn thành nhiều giao dịch hơn trong cùng một khoảng thời gian. Để làm như vậy, chúng ta sẽ cần xác định các điểm nghẽn và khắc phục chúng.\nTrước tiên, hãy xác định số lượng giao dịch mỗi giây mà chúng ta đã thực hiện. Quay về với giao diện terminal của MobaXterm và xem số lượng giao dịch mỗi giây (tps transactions per second) khi sử dụng pgbench để kiểm tra khả năng với 200 client. Trong hai dòng cuối cùng của ảnh chụp màn hình ở trên, chúng ta thấy rằng khối lượng giao dịch của chúng ta có thể thực hiện khoảng 578 giao dịch mỗi giây (tps) trên db.t3.medium instance. Nếu môi trường lab của bạn sử dụng loại phiên bản khác, chẳng hạn như db.t3.large, bạn có thể thấy một giá trị khác.\nBây giờ, hãy phân tích hiệu suất của chúng ta. Nói chung, bạn có thể xem xét hiệu suất của cơ sở dữ liệu ở mức độ vi mô và vĩ mô. Ở cấp độ vi mô, bạn muốn sẽ xem xét các câu lệnh SQL và xác định xem có bất kỳ câu lệnh SQL nào có thể được điều chỉnh hay không. Performance Insights là một công cụ tốt cho loại phân tích cấp vi mô này.\nỞ cấp độ vĩ mô, bạn muốn xem xét các số liệu về hiệu năng cho toàn bộ hệ thống. Bạn làm điều này để xem liệu có bất kỳ tài nguyên quan trọng nào (chẳng hạn như CPU, Bộ nhớ hoặc IO) đang bị quá tải và trở thành nút thắt cổ chai hay không. Các monitoring metrics trong RDS console (cũng có sẵn trong AWS CloudWatch) là công cụ tốt cho việc này.\nHãy bắt đầu bằng cách bắt đầu ở cấp độ vi mô và xem xét khối lượng công việc của chúng ta trong Performance Insights. Chúng ta có thể nhận thấy rằng sự kiện chờ hàng đầu của chúng ta là WALWriteLock và DataFileRead. Chúng tôi đã xác định đây là sự kiện chờ đợi hàng đầu vì chúng tôi có thể thấy trực quan rằng nó chiếm nhiều diện tích nhất trong biểu đồ. Nói cách khác, nó có số phiên chờ đợi sự kiện này nhiều nhất (trung bình 100 phiên cơ sở dữ liệu đang chờ sự kiện đó ). Chúng ta cũng có thể xác định rằng Câu lệnh SQL được liên kết với WALWriteLock là END, trong PostgreSQL là câu lệnh closes/commits.\nCounter metrics Database load Top SQL Có thể bạn chưa quen với sự kiện chờ WALWriteLock. WAL là Write Ahead Log, còn được gọi là nhật ký giao dịch. Các tệp này chứa bản ghi liên tục về COMMITs và COMMITs không thể quay lại máy khách cho đến khi thông tin WAL được ghi an toàn vào đĩa.\nTrong trường hợp của chúng ta, có vẻ như một số lượng lớn sessions đang sao lưu trên WALWriteLock và các phiên này đang chờ đến khi giao dịch của họ kết thúc (commits). Nói cách khác, hệ thống dường như không thể ghi các commits vào disk đủ nhanh.\nBây giờ chúng ta hãy nhìn vào cấp độ vĩ mô. Để làm như vậy, hãy quay lại RDS console và chuyển đến Monitoring tab cho cơ sở dữ liệu của bạn. Điều này sẽ cho chúng ta thấy một số, số liệu trên toàn hệ thống. Đây là một ví dụ về những gì bạn sẽ thấy: Trong biểu đồ trên, hãy lưu ý rằng CPUUtilization không cao mặc dù chúng tôi có 200 kết nối đồng thời trên 2 vCPU (db.t3.medium). Vì vậy, chúng ta có thể nói rằng có vẻ như CPU không phải là điểm nghẽn cổ chai.\nTiếp theo hãy xem xét một số số liệu I/O. Trong biểu đồ trên, hãy lưu ý rằng các waiting I/O requests của DiskQueueDepth đã trở nên lớn hơn. Ngoài ra, hãy lưu ý rằng IOPS ghi của chúng ta gần bằng 1000. Nếu bạn nhớ từ khi tạo cơ sở dữ liệu, chúng tôi đã quyết định sử dụng bộ lưu trữ Provisioned IOPS (io1) với 1000 IOPS. Vì vậy, có vẻ như chúng tôi có thể sắp đạt đến giới hạn hiện tại của dung lượng lưu trữ được phân bổ. Để xác nhận, bạn cũng có thể xem qua các biểu đồ và tìm biểu đồ Write Latency:\nTrong biểu đồ WriteLatency, chúng ta có thể thấy rằng độ trễ ghi rất cao trong khối lượng công việc. Nó sẽ phù hợp với giả thuyết của chúng tôi rằng chúng tôi đang đạt đến giới hạn của bộ nhớ được định cấu hình (1000 IOPS), điều này khiến độ sâu hàng đợi và độ trễ ghi tăng lên, đồng thời khiến việc ghi vào WAL mất nhiều thời gian hơn. Ngày càng có nhiều phiên cơ sở dữ liệu phải chờ lâu hơn để WAL được ghi khi họ thực hiện giao dịch của mình.\nVì vậy, có vẻ như chúng ta có thể làm cho khối lượng công việc giao dịch của mình chạy nhanh hơn nếu tăng IOPS. Tin tốt là bộ nhớ mà RDS sử dụng có tính linh hoạt. Bạn có thể tăng/giảm cấu hình IOPS trong khi cơ sở dữ liệu chạy. Bạn thậm chí có thể thay đổi Loại lưu trữ (từ io1 sang gp2 hoặc ngược lại) trong khi cơ sở dữ liệu chạy nếu bạn muốn.\nHãy sửa đổi cơ sở dữ liệu của chúng ta và chỉ định 3500 IOPS (tăng từ giá trị hiện tại là 1000). Để làm như vậy, hãy nhấp vào nút Modify ở đầu màn hình. Trên màn hình sửa đổi, thay đổi trường Provisioned IOPS thành 3500.\nSau đó kéo xuống cuối trang sửa đổi và nhấp vào Continue.\nTrên trang Summary and Scheduling, hãy nhớ chọn Apply Immediately. Sau đó nhấp vào Modify DB Instance. Tại thời điểm này, bạn hãy truy cập Databases List. Điều thú vị ở trang Databases List là bạn có thể dễ dàng làm mới trang để có thể theo dõi những thay đổi trong Status. Điều bạn muốn làm là xem Status trong khi RDS thay đổi IOPS. Cơ sở dữ liệu sẽ vẫn mở trong khi điều này xảy ra. Tuy nhiên, chúng tôi muốn đợi thay đổi hoàn tất trước khi chạy lại khối lượng công việc của mình. Quá trình này sẽ mất 10-15 phút. Đầu tiên, bạn sẽ thấy trạng thái có nội dung Modifying, sau đó sẽ có nội dung Storage Optimization khi hệ thống lưu trữ phụ trợ tự tối ưu hóa để cung cấp cấu hình IOPS mới.\n(Không bắt buộc) AWS CLI Ngoài ra, bạn có thể sửa đổi IOPS của db instance bằng AWS CLI như dưới đây: Command\rLệnh sau sửa đổi IOPS của instance.\r```\raws rds modify-db-instance --db-instance-identifier rds-pg-labs --iops 3500 --allocated-storage 100 --apply-immediately --region \u0026lt; your region \u0026gt;\r```\rSau khi trạng thái trở về Available (hoặc nếu bạn thiếu kiên nhẫn, hãy đợi ít nhất cho đến khi thông báo “Storage Optimization”), sau đó quay lại Cloud9 và chạy lại khối lượng công việc tương tự như trước:\npgbench --host \u0026lt;your database endpoint\u0026gt;--username masteruser --protocol=prepared -P 30 --time=300 --client=200 --jobs=200 \u0026lt;your dabase name\u0026gt; Bây giờ bạn sẽ thấy benchmark chạy nhanh hơn. Ví dụ: bây giờ bạn sẽ thấy khoảng 1300 giao dịch mỗi giây (tăng từ 578 giao dịch mỗi giây trước đó).\nVì vậy, bằng cách tăng dung lượng IOPS của bộ lưu trữ, bạn có thể làm cho việc kiểm tra chạy nhanh hơn. Bạn không bị giới hạn sử dụng số liệu RDS/CloudWatch và Performance Insight. Bạn có thể mở rộng các chỉ số CloudWatch mặc định bằng số liệu tùy chỉnh. Bạn có thể sử dụng các công cụ PostgreSQL khác như Bảng điều khiển được tích hợp trong pgAdmin. Hoặc một số DBA PostgreSQL sử dụng công cụ pgBadger để phân tích hiệu suất cơ sở dữ liệu. Để tìm hiểu về cách sử dụng pgBadger với RDS PostgreSQL, hãy đọc tài liệu này .\nTrong bài thực hành này, chúng tôi đang sử dụng instance type db.t3.mdedium. Vì vậy, chúng ta cũng có thể thấy một số lượng lớn các sự kiện chờ đợi cho DataFileRead. Sự kiện chờ DataFileRead có thể cho biết rằng loại phiên bản của bạn có thể không có đủ bộ nhớ để đưa tập dữ liệu đang hoạt động vào bộ đệm dùng chung của cơ sở dữ liệu. Vì vậy, bạn có thể cân nhắc chuyển sang loại phiên bản có nhiều bộ nhớ hơn như một cách khả thi để giải quyết tình trạng chờ đợi DataFileRead.\n"
},
{
	"uri": "/vi/4-backuprecovery/4-5-pointintimerestore/",
	"title": "Point in Time Restore",
	"tags": [],
	"description": "",
	"content": "Khôi phục cơ sở dữ liệu của bạn tại một thời điểm Đôi khi, bạn sẽ muốn khôi phục cơ sở dữ liệu về một điểm cụ thể trong quá khứ, ngay trước khi chạy tập lệnh chuyển đổi dữ liệu gặp lỗi hoặc làm mới môi trường của bạn về trạng thái trước khi chạy tập lệnh nâng cấp. Đây được gọi là một Point In Time Recovery hay PITR.\nAmazon RDS for PostgreSQL cho phép khôi phục về bất kỳ thời điểm nào trong thời gian lưu giữ bản sao lưu của bạn. Điều này có thể thực hiện được thông qua việc sử dụng các bản sao lưu tự động kết hợp với nhật ký giao dịch, được tải lên S3 cứ sau 5 phút.\nỞ phần thực hành, chúng ta sẽ sử AWS CLI để thực hiện các thử nghiệm Amazon RDS theo dõi thời gian khôi phục mới nhất cho cơ sở dữ liệu của bạn. Chúng ta sẽ kiểm tra thông tin này bằng AWS-CLI. Để chạy các lệnh này, chúng tôi sẽ sử dụng môi trường Cloud9 mà bạn thiết lập trong phần điều kiện tiên quyết. Nếu bạn chưa làm điều này, hãy quay lại đây và hoàn thành bước này.\nSử dụng EC2 instance, kiểm tra thời gian khôi phục mới nhất cho cơ sở dữ liệu của bạn.\naws rds describe-db-instances \\\r--db-instance-identifier rdspg-fcj-labs \\\r--region $AWSREGION \\\r--query \u0026#39;DBInstances[0].LatestRestorableTime\u0026#39; \\\r--output text Output mẫu bên dưới hiển thị thời gian khôi phục mới nhất là ngày 6 tháng 10 năm 2023 lúc 14:04 UTC\n2023-10-6T12:04:19Z Bằng cách sử dụng AWS-CLI, chúng ta có thể sử dụng lệnh sau để khôi phục cơ sở dữ liệu về thời điểm có thể khôi phục mới nhất mà chúng ta đã tra cứu ở bước trước. Hãy chắc chắn để cập nhật thời gian.\naws rds restore-db-instance-to-point-in-time \\\r--source-db-instance-identifier rdspg-fcj-labs \\\r--target-db-instance-identifier rdspg-fcj-labs-restore-latest \\\r--restore-time 2023-10-6T12:04:19Z Bạn sẽ thấy output tương tự như: Output\r\u0026#34;DBInstance\u0026#34;: {\r\u0026#34;PubliclyAccessible\u0026#34;: true,\r\u0026#34;MasterUsername\u0026#34;: \u0026#34;masteruser\u0026#34;,\r\u0026#34;MonitoringInterval\u0026#34;: 0,\r\u0026#34;LicenseModel\u0026#34;: \u0026#34;postgresql-license\u0026#34;,\r\u0026#34;VpcSecurityGroups\u0026#34;: [\r{\r\u0026#34;Status\u0026#34;: \u0026#34;active\u0026#34;,\r\u0026#34;VpcSecurityGroupId\u0026#34;: \u0026#34;sg-040ccaea808501fad\u0026#34;\r}\r],\r\u0026#34;CopyTagsToSnapshot\u0026#34;: false,\r\u0026#34;OptionGroupMemberships\u0026#34;: [\r{\r\u0026#34;Status\u0026#34;: \u0026#34;pending-apply\u0026#34;,\r\u0026#34;OptionGroupName\u0026#34;: \u0026#34;default:postgres-15\u0026#34;\r}\r],\r\u0026#34;PendingModifiedValues\u0026#34;: {},\r\u0026#34;Engine\u0026#34;: \u0026#34;postgres\u0026#34;,\r\u0026#34;MultiAZ\u0026#34;: false,\r\u0026#34;DBSecurityGroups\u0026#34;: [],\r\u0026#34;DBParameterGroups\u0026#34;: [\r{\r\u0026#34;DBParameterGroupName\u0026#34;: \u0026#34;default.postgres15\u0026#34;,\r\u0026#34;ParameterApplyStatus\u0026#34;: \u0026#34;in-sync\u0026#34;\r}\r],\r\u0026#34;PerformanceInsightsEnabled\u0026#34;: false,\r\u0026#34;AutoMinorVersionUpgrade\u0026#34;: true,\r\u0026#34;PreferredBackupWindow\u0026#34;: \u0026#34;22:30-23:00\u0026#34;,\r\u0026#34;DBSubnetGroup\u0026#34;: {\r\u0026#34;Subnets\u0026#34;: [\r{\r\u0026#34;SubnetStatus\u0026#34;: \u0026#34;Active\u0026#34;,\r\u0026#34;SubnetIdentifier\u0026#34;: \u0026#34;subnet-0b17d2e34c1123500\u0026#34;,\r\u0026#34;SubnetOutpost\u0026#34;: {},\r\u0026#34;SubnetAvailabilityZone\u0026#34;: {\r\u0026#34;Name\u0026#34;: \u0026#34;us-east-1e\u0026#34;\r}\r},\r{\r\u0026#34;SubnetStatus\u0026#34;: \u0026#34;Active\u0026#34;,\r\u0026#34;SubnetIdentifier\u0026#34;: \u0026#34;subnet-0cf079d239ac29e77\u0026#34;,\r\u0026#34;SubnetOutpost\u0026#34;: {},\r\u0026#34;SubnetAvailabilityZone\u0026#34;: {\r\u0026#34;Name\u0026#34;: \u0026#34;us-east-1b\u0026#34;\r}\r},\r{\r\u0026#34;SubnetStatus\u0026#34;: \u0026#34;Active\u0026#34;,\r\u0026#34;SubnetIdentifier\u0026#34;: \u0026#34;subnet-0bee38e5233fa9f09\u0026#34;,\r\u0026#34;SubnetOutpost\u0026#34;: {},\r\u0026#34;SubnetAvailabilityZone\u0026#34;: {\r\u0026#34;Name\u0026#34;: \u0026#34;us-east-1f\u0026#34;\r}\r},\r{\r\u0026#34;SubnetStatus\u0026#34;: \u0026#34;Active\u0026#34;,\r\u0026#34;SubnetIdentifier\u0026#34;: \u0026#34;subnet-06327d061c2b4587b\u0026#34;,\r\u0026#34;SubnetOutpost\u0026#34;: {},\r\u0026#34;SubnetAvailabilityZone\u0026#34;: {\r\u0026#34;Name\u0026#34;: \u0026#34;us-east-1a\u0026#34;\r}\r},\r{\r\u0026#34;SubnetStatus\u0026#34;: \u0026#34;Active\u0026#34;,\r\u0026#34;SubnetIdentifier\u0026#34;: \u0026#34;subnet-0cd302225e2bf84ca\u0026#34;,\r\u0026#34;SubnetOutpost\u0026#34;: {},\r\u0026#34;SubnetAvailabilityZone\u0026#34;: {\r\u0026#34;Name\u0026#34;: \u0026#34;us-east-1d\u0026#34;\r}\r},\r{\r\u0026#34;SubnetStatus\u0026#34;: \u0026#34;Active\u0026#34;,\r\u0026#34;SubnetIdentifier\u0026#34;: \u0026#34;subnet-0b05e234776e32206\u0026#34;,\r\u0026#34;SubnetOutpost\u0026#34;: {},\r\u0026#34;SubnetAvailabilityZone\u0026#34;: {\r\u0026#34;Name\u0026#34;: \u0026#34;us-east-1c\u0026#34;\r}\r}\r],\r\u0026#34;DBSubnetGroupName\u0026#34;: \u0026#34;default\u0026#34;,\r\u0026#34;VpcId\u0026#34;: \u0026#34;vpc-05136ed012ff6cc5d\u0026#34;,\r\u0026#34;DBSubnetGroupDescription\u0026#34;: \u0026#34;default\u0026#34;,\r\u0026#34;SubnetGroupStatus\u0026#34;: \u0026#34;Complete\u0026#34;\r},\r\u0026#34;ReadReplicaDBInstanceIdentifiers\u0026#34;: [],\r\u0026#34;AllocatedStorage\u0026#34;: 100,\r\u0026#34;DBInstanceArn\u0026#34;: \u0026#34;arn:aws:rds:us-east-1:478371912360:db:rdspg-fcj-labs-restore-latest\u0026#34;,\r\u0026#34;BackupRetentionPeriod\u0026#34;: 3,\r\u0026#34;DBName\u0026#34;: \u0026#34;pglab\u0026#34;,\r\u0026#34;PreferredMaintenanceWindow\u0026#34;: \u0026#34;thu:08:05-thu:08:35\u0026#34;,\r\u0026#34;DBInstanceStatus\u0026#34;: \u0026#34;creating\u0026#34;,\r\u0026#34;IAMDatabaseAuthenticationEnabled\u0026#34;: false,\r\u0026#34;EngineVersion\u0026#34;: \u0026#34;15.3\u0026#34;,\r\u0026#34;MaxAllocatedStorage\u0026#34;: 1000,\r\u0026#34;DeletionProtection\u0026#34;: false,\r\u0026#34;DomainMemberships\u0026#34;: [],\r\u0026#34;StorageType\u0026#34;: \u0026#34;io1\u0026#34;,\r\u0026#34;DbiResourceId\u0026#34;: \u0026#34;db-YZM6TLDJKUBUM3MFXZIGZ5AGGM\u0026#34;,\r\u0026#34;CACertificateIdentifier\u0026#34;: \u0026#34;rds-ca-2019\u0026#34;,\r\u0026#34;Iops\u0026#34;: 1000,\r\u0026#34;StorageEncrypted\u0026#34;: true,\r\u0026#34;AssociatedRoles\u0026#34;: [],\r\u0026#34;KmsKeyId\u0026#34;: \u0026#34;arn:aws:kms:us-east-1:478371912360:key/dd420e91-002c-49bc-89d8-709cecce145a\u0026#34;,\r\u0026#34;DBInstanceClass\u0026#34;: \u0026#34;db.t3.medium\u0026#34;,\r\u0026#34;DbInstancePort\u0026#34;: 0,\r\u0026#34;DBInstanceIdentifier\u0026#34;: \u0026#34;rdspg-fcj-labs-restore-latest\u0026#34;\r} Bây giờ, hãy quay lại RDS Console để kiểm tra cơ sở dữ liệu đang khôi phục. Nếu bạn xem chi tiết, hãy lưu ý rằng tất cả các thông số cơ sở dữ liệu (ví dụ: DB Instance Class, Security Group) đều khớp với cơ sở dữ liệu gốc. Bây giờ, chúng ta sẽ sử dụng RDS Console để khôi phục cơ sở dữ liệu của chúng ta về 30 phút trước đó. Chọn cơ sở dữ liệu rdspg-fcj-labs, chọn Actions và chọn Restore to point in time. Trên trang Launch DB Instance, chọn một tùy chỉnh và chọn thời gian trước 30 phút. Nhập một DB instance identifier mới (ví dụ: rdspg-fcj-labs-earlier-restore), để thông tin còn lại ở giá trị mặc định và nhấp vào Restore to point in time. Khi quá trình khôi phục bắt đầu, bạn sẽ được đưa trở lại danh sách cơ sở dữ liệu và sẽ thấy phiên bản mới của mình được tạo. "
},
{
	"uri": "/vi/5-scalability/",
	"title": "Scalability",
	"tags": [],
	"description": "",
	"content": "Scalability là khả năng để xử lý lượng dữ liệu và lưu lượng ngày càng tăng mà không ảnh hưởng đến hiệu suất của một hệ thống. Amazon RDS PostgreSQL cung cấp nhiều tùy chọn về khả năng mở rộng, bao gồm:\nVertical scaling: Việc tăng kích thước của DB instance class có thể cung cấp thêm CPU, bộ nhớ và dung lượng I/O. Horizontal scaling: Việc thêm read replicas vào phiên bản DB của bạn có thể phân phối lưu lượng đọc trên nhiều phiên bản và cải thiện hiệu suất. Aurora: Amazon RDS Aurora là cơ sở dữ liệu quan hệ tương thích với MySQL và PostgreSQL được quản lý toàn phần, được xây dựng cho đám mây. Aurora cung cấp khả năng mở rộng và hiệu suất cao, đồng thời cũng có tính sẵn sàng cao. Trong bài thực hành này, bạn sẽ thêm một phiên bản bản sao chỉ có quyền đọc vào cấu hình của mình để cung cấp thêm khả năng mở rộng khả năng đọc cho ứng dụng của bạn. Và mô phỏng kịch bản chuyển đổi dự phòng đọc-bản sao.\nNội dung: Tạo Read-replica để cung cấp khả năng mở rộng đọc Chuyển đổi Read Replica thành instance độc lập Perform vertical scaling Di chuyển sang DB Multi-AZ cluster bằng read replica Tạo DB instance read replica từ a Multi-AZ DB cluster "
},
{
	"uri": "/vi/5-scalability/5-5-multiazdbcluster/",
	"title": "Tạo DB instance read replica từ a Multi-AZ DB cluster",
	"tags": [],
	"description": "",
	"content": "Amazon RDS Read Replicas cung cấp hiệu suất và độ bền nâng cao cho các RDS instance. Bản sao chỉ có quyền đọc giúp dễ dàng tăng quy mô theo phiên bản cao hơn giới hạn công suất một cách linh hoạt của một phiên bản CSDL cho những khối lượng công việc cơ sở dữ liệu có tần suất đọc nhiều. Bạn có thể tạo một hay nhiều bản sao của một phiên bản CSDL nguồn cho trước và phục vụ lưu lượng đọc của ứng dụng có dung lượng lớn từ nhiều bản sao dữ liệu của bạn, qua đó tăng tổng thông lượng đọc. Khi cần, cũng có thể nâng cấp bản sao chỉ có quyền đọc để trở thành phiên bản CSDL độc lập. Tìm hiểu thêm các tính năng của RDS Read replicas.\nPlease visit Working with Multi-AZ DB cluster read replicas for additional details.\nRead replica của DB Multi-AZ cluster khác với DB instances đọc của Multi-AZ DB cluster theo như sau:\nCác reader DB instances đóng vai trò là mục tiêu chuyển đổi dự phòng tự động, trong khi các read replicas thì không. Các Reader DB instances phải xác nhận một thay đổi so với writer DB instance trước khi thay đổi đó có thể được thực hiện. Tuy nhiên, đối với các DB instance read replicas, các bản cập nhật được sao chép không đồng bộ sang read replica mà không yêu cầu xác nhận. Reader DB instances luôn chia sẻ cùng một instance class, storage type và engine version như writer DB instance của the Multi-AZ DB cluster. Tuy nhiên, DB instance read replicas không nhất thiết phải chia sẻ cùng cấu hình với cụm nguồn. Bạn có thể nâng cấp bản sao đọc phiên bản DB lên phiên bản DB độc lập. Bạn không thể nâng cấp phiên bản DB đọc của cụm DB Multi-AZ thành phiên bản độc lập. Reader endpoint chỉ định tuyến các yêu cầu đến các reader DB instances của Multi-AZ DB cluster. Nó không bao giờ định tuyến các yêu cầu đến DB instance read replica. Để biết thêm thông tin, hãy xem Tổng quan về Multi-AZ DB clusters.\nĐể tạo read replica, hãy chỉ định Multi-AZ DB cluster làm replication source. Một trong các reader instances của the Multi-AZ DB luôn là nguồn sao chép chứ không phải writer instance. Điều kiện này đảm bảo rằng bản sao luôn đồng bộ với cụm nguồn, ngay cả trong trường hợp failover.\nTìm RDS PostgreSQL instance rdspg-fcj-labs-read-test trong Databases và nhấp vào nút phía trước DB Instance. Nhấp vào Actions ở bên phải và chọn Create Read Replica. Tại mục Settings, bạn phải cung cấp DB Instance Identifier (i.e. tên của instance). Tại mục the Availability, chọn Multi-AZ DB instance deployment. Để đơn giản, chúng tôi sẽ để phần còn lại ở chế độ mặc định. Kéo xuống phía dưới và click Create read replica.\nSau khi nhấp vào Create read replica, bạn sẽ được đưa trở lại trang Databases. Làm mới trang và bạn sẽ thấy read replica đang được tạo.\nSẽ mất khoảng 10 phút để read replica của bạn. Cơ sở dữ liệu chính của bạn tiếp tục available khi điều này xảy ra\nKhi trạng thái của Read Replica là Available trên trang Databases, hãy nhấp vào read replica instance mới. Trên trang chi tiết về read replica, trước tiên hãy chú ý đến endpoint. Read replica có endpoint khác với primary instance của bạn.\nTiếp theo, kéo xuống để xem chi tiết bản sao. Bạn có thể thấy rằng cụm chính của chúng ta đang sao chép sang read replica instance của chúng ta.\nSau đó, bạn có thể kết nối với read replica bằng cách sử dụng endpoint của nó cũng như tên người dùng và mật khẩu giống như cụm nguồn. Ví dụ: kết nối và thực hiện truy vấn sau để kiểm tra độ trễ sao chép giữa nguồn và bản sao:\nSELECT extract(epoch from now() - pg_last_xact_replay_timestamp()) AS replica_lag; (Không bắt buộc) AWS CLI Ngoài ra, bạn có thể chuyển đổi read replica bằng AWS CLI như dưới đây: Code\rLệnh sau tạo read replica:\naws rds create-db-instance-read-replica \\\r--db-instance-identifier taz-maz-replica \\\r--source-db-cluster-identifier rdspg-fcj-labs-read-test "
},
{
	"uri": "/vi/4-backuprecovery/4-6-awsbackup/",
	"title": "AWS Backup",
	"tags": [],
	"description": "",
	"content": "AWS Backup là dịch vụ sao lưu được quản lý toàn phần giúp dễ dàng tập trung và tự động hóa việc sao lưu dữ liệu trên các dịch vụ AWS. Với AWS Backup, bạn có thể tạo các chính sách sao lưu được gọi là backup plans. Bạn có thể sử dụng các gói này để xác định các yêu cầu sao lưu của mình, chẳng hạn như tần suất sao lưu dữ liệu và thời gian lưu giữ các bản sao lưu đó.\nAWS Backup cho phép bạn áp dụng backup plans cho tài nguyên AWS của mình bằng cách simply tagging them. AWS Backup sẽ tự động sao lưu tài nguyên AWS của bạn theo kế hoạch sao lưu mà bạn đã xác định.\nRDS/PostgreSQL sẽ tự động sao lưu cơ sở dữ liệu của bạn và giữ lại các bản sao lưu đó trong khoảng thời gian lưu giữ của bạn, tối đa 35 ngày. Các bản sao lưu được tạo trước thông qua AWS Backup được coi là snapshot thủ công và sẽ tồn tại cho đến khi bị xóa.\nTạo Service Role cho AWS Backup Để AWS Backup thay mặt bạn thực hiện các hoạt động, chúng tôi cần gán cho nó 1 service role.\nTại giao diện IAM Console chọn Create role Chọn AWS Service và sau đó chọn AWS Backup, cuối cùng click Next. Trong bước thêm quyền, hãy sử dụng bộ lọc bằng cách nhập AWSBackupServiceRole và chọn: AWSBackupServiceRolePolicyForBackup và AWSBackupServiceRolePolicyForRestore, sau đó click vào Next. Đặt tên cho role, rdspg-AWSBackupServiceRole, xem lại chi tiết rồi bấm vào Create Role. Sao lưu theo yêu cầu từ AWS Backup Trở lại giao diện AWS Backup Console .\nĐầu tiên tạo Backup Vault, Nó cho phép tổ chức quản lý và tổ chức các bản sao lưu một cách hiệu quả, giúp đảm bảo tính toàn vẹn và khả năng khôi phục dữ liệu trong trường hợp xảy ra sự cố, mất mát dữ liệu hoặc các vấn đề khác. Click vào Backup Vaults từ menu bên trái, sau đó chọn Create Backup vault. Đặt tên cho vault là rdspg-backup-vault và nhấp vào Create Backup vault. Với vault đã được tạo, giờ đây bạn có thể tạo bản sao lưu theo yêu cầu. Chọn Protected resources từ menu bên trái, sau đó nhấp vào Create on-demand backup. Hoàn tất hộp thoại bằng cách chọn RDS và loại tài nguyên của bạn, sau đó chọn cơ sở dữ liệu rdspg-fcj-labs. Chọn backup vault bạn vừa tạo. Chọn chọn IAM role và chọn rdspg-AWSBackupServiceRole của bạn từ danh sách thả xuống và cuối cùng nhấn Create on-demand backup. Bạn sẽ thấy bản sao lưu trong danh sách sao lưu của mình. Điều này giống như snapshot thủ công nhưng bản sao lưu của bạn được tổ chức thành một kho lưu trữ dự phòng. Thiết lập Backup Plan trong AWS Backup Việc lựa chọn tài nguyên từ backup plan có thể được thực hiện bằng cách sử dụng resource tags hoặc tham chiếu trực tiếp.\nBây giờ hãy thiết lập backup plan bằng cách sử dụng resource tags. Sử dụng AWS Backup theo cách này sẽ đảm bảo rằng các tài nguyên mới tạo được gắn thẻ đúng cách sẽ được sao lưu thông qua AWS Backup\nBắt đầu bằng cách thêm thẻ tài nguyên vào cơ sở dữ liệu của bạn từ RDS Console , nhấp vào rdspg-fcj-labs instance, sau đó chọn tab Tags và chọn Add. Thêm Environment cho production và ResourceType cho rdspg-fcj gắn thẻ vào rdspg-fcj-labs database.\nTại giao diện AWS Backup Console chọn Backup plans từ menu bên trái, sau đó chọn Create backup plan. Chọn Build new plan, đặt tên cho Backup plan rdspg-backup-plan, đặt tên cho Backup Rule DailyBackups, chọn Backup vault rdspg-backup-vault, để mọi thứ khác ở mặc định, sau đó click Create plan. Hoàn tất hộp thoại bằng cách nhập tên gán tài nguyên, rdspg-bp-resource-selection, chọn IAM role và chọn IAM role đã tạo trước đó rdspg-AWSBackupServiceRole. Cuối cùng thêm các thẻ Environment và ResoureType như trong ảnh chụp màn hình. Chúc mừng! Bây giờ bạn đã tạo gói dự phòng dựa trên thẻ, mọi cơ sở dữ liệu bạn tạo trong tương lai với các thẻ này sẽ được tự động sao lưu bằng gói này.\n"
},
{
	"uri": "/vi/6-parametergroups/",
	"title": "Parameter Groups",
	"tags": [],
	"description": "",
	"content": "Parameter groups là một tính năng dùng để quản lý cấu hình cho các dịch vụ cơ sở dữ liệu quan hệ, chẳng hạn như Amazon RDS (Relational Database Service). Một parameter group chứa một tập hợp các tham số (parameters) có thể được cấu hình để điều chỉnh các khía cạnh khác nhau của dịch vụ cơ sở dữ liệu.\nParameter groups rất hữu ích cho nhiều mục đích khác nhau, bao gồm:\nTính nhất quán: Các nhóm tham số có thể giúp bạn đảm bảo rằng tất cả các db instance của bạn đều được cấu hình theo cùng một cách. Điều này có thể giúp giảm nguy cơ xảy ra lỗi và giúp khắc phục sự cố dễ dàng hơn. Điều chỉnh hiệu suất: Các nhóm tham số có thể được sử dụng để điều chỉnh cơ sở dữ liệu của bạn cho khối lượng công việc cụ thể. Ví dụ: bạn có thể tăng mức phân bổ bộ nhớ cho cơ sở dữ liệu đang chạy khối lượng công việc đọc lớn. Bảo mật: Các nhóm tham số có thể được sử dụng để triển khai các biện pháp bảo mật tốt nhất. Ví dụ: bạn có thể tắt một số tính năng nhất định không cần thiết cho ứng dụng của mình. Dưới đây là một số mẹo để sử dụng nhóm tham số một cách hiệu quả:\nSử dụng các nhóm tham số mặc định làm điểm bắt đầu nhưng hãy sửa đổi chúng để đáp ứng nhu cầu cụ thể cho ứng dụng của bạn. Tạo các nhóm tham số tùy chỉnh cho các loại db instance khác nhau, chẳng hạn như production instances và development instances.. Kiểm tra mọi thay đổi đối với các nhóm tham số trong môi trường chạy thử trước khi triển khai chúng vào sản xuất. Giám sát các phiên bản cơ sở dữ liệu của bạn để đảm bảo rằng các nhóm tham số được cấu hình chính xác. Nội dung Tạo Custom Parameter Group Điều chỉnh Custom Parameter Group Áp dụng Custom Parameter Group "
},
{
	"uri": "/vi/7-highavailability/",
	"title": "Tính sẵn sàng cao",
	"tags": [],
	"description": "",
	"content": "Tính sẵn sàng cao (HA) cho Amazon RDS PostgreSQL có thể đạt được bằng nhiều phương pháp khác nhau, bao gồm:\nMulti-AZ deployments: Triển khai Multi-AZ tạo bản sao dự phòng của cơ sở dữ liệu ở Availability Zone (AZ) khác với primary database. Nếu primary database bị lỗi, bản sao dự phòng có thể được nâng cấp lên primary database, giảm thiểu thời gian ngừng hoạt động. Read replicas: Bản sao đã đọc là bản sao của cơ sở dữ liệu có thể được sử dụng để giảm tải lưu lượng đọc từ cơ sở dữ liệu chính. Điều này có thể cải thiện hiệu suất và khả năng mở rộng của cơ sở dữ liệu. Bản sao chỉ có quyền đọc cũng có thể được sử dụng để tạo kế hoạch khắc phục thảm họa trong trường hợp cơ sở dữ liệu chính bị lỗi. Database clusters: Database clusters là một nhóm các db instance hoạt động cùng nhau như một đơn vị logic duy nhất. Database clusters có thể được sử dụng để đạt được tính sẵn sàng và khả năng mở rộng cao bằng cách phân phối khối lượng công việc trên nhiều phiên bản. Multi-AZ deployments là cách phổ biến nhất để đạt được độ sẵn sàng cao cho Amazon RDS PostgreSQL. Triển khai Multi-AZ rất dễ thiết lập và quản lý, đồng thời cung cấp mức độ sẵn sàng cao.\nRead replicas cũng có thể được sử dụng để cải thiện tính khả dụng của Amazon RDS PostgreSQL database. Read replicas có thể được sử dụng để giảm tải lưu lượng đọc từ primary database, điều này có thể cải thiện hiệu suất và khả năng mở rộng của cơ sở dữ liệu. Read replicas cũng có thể được sử dụng để tạo kế hoạch khắc phục thảm họa trong trường hợp cơ sở dữ liệu chính bị lỗi.\nDatabase clusters là tùy chọn nâng cao nhất để đạt được độ sẵn sàng và khả năng mở rộng cao cho Amazon RDS PostgreSQL. Việc thiết lập và quản lý các cụm cơ sở dữ liệu phức tạp hơn so với triển khai nhiều AZ, nhưng chúng có thể cung cấp mức độ sẵn sàng và khả năng mở rộng cao hơn.\nIn this lab, bạn sẽ thiết lập cấu hình Multi-AZ có tính sẵn sàng cao cho RDS PostgreSQL database instance của mình. Sau đó, bạn sẽ mô phỏng một sự kiện chuyển đổi dự phòng để xem nó hoạt động như thế nào. Cuối cùng, bạn mở rộng RDS instance của mình để có thêm dung lượng ghi.\nNội dung Thiết lập tính sẵn sàng cao cho RDS PostgreSQL (Multi-AZ) Kết nối đến Multi-AZ endpoint Thực hiện chuyển đổi dự phòng để xác minh tính sẵn sàng cao "
},
{
	"uri": "/vi/8-learnmoreaboutpostgresql/",
	"title": "Tìm hiểu thêm về PostgreSQL",
	"tags": [],
	"description": "",
	"content": "Benechmarking PostgreSQL Server Pgbench là một công cụ benchmarking. Nó được sử dụng để kiểm tra hiệu năng của máy chủ PostgreSQL trong nhiều khối lượng công việc khác nhau. Pgbench có thể được sử dụng để kiểm tra nhiều yếu tố, bao gồm:\nTransaction throughput Latency Memory usage CPU usage Disk I/O Pgbench hoạt động bằng cách tạo một số phiên máy khách đồng thời thực thi một loạt câu lệnh SQL. Các câu lệnh SQL thường đại diện cho các loại giao dịch được thực thi trong ứng dụng trong thế giới thực. Sau đó, pgbench đo hiệu suất của máy chủ PostgreSQL dưới tải do phiên máy khách tạo ra.\nPgbench có thể được sử dụng để kiểm tra nhiều khối lượng công việc khác nhau, bao gồm:\nTPC-B: mô phỏng khối lượng công việc xử lý giao dịch trực tuyến (OLTP Online transactional processing) phức tạp. TPROC: mô phỏng khối lượng công việc OLTP đơn giản. TPC-C: mô phỏng khối lượng công việc của hệ thống quản lý. Custom workloads: PGbench cũng có thể được sử dụng để kiểm tra khối lượng công việc tùy chỉnh bằng cách chỉ định tệp tập lệnh chứa các câu lệnh SQL sẽ được thực thi. Để chạy pgbench, bạn chỉ cần chỉ định các tham số sau:\nSố lượng phiên khách hàng đồng thời Thời gian của bài kiểm tra benchmark Cơ sở dữ liệu để kết nối Kịch bản giao dịch được sử dụng Pgbench sau đó sẽ tạo một báo cáo cho thấy hiệu suất của máy chủ PostgreSQL dưới tải do các phiên máy khách tạo ra. Báo cáo sẽ bao gồm các số liệu sau:\nSố giao dịch mỗi giây (tps Transactions per second ): Số lượng giao dịch trung bình được hoàn thành mỗi giây. Độ trễ (Latency): Thời gian trung bình để hoàn thành một giao dịch. Mức sử dụng bộ nhớ (Memory usage): Dung lượng bộ nhớ đã được máy chủ PostgreSQL sử dụng trong quá trình đo điểm chuẩn. Mức sử dụng CPU (CPU usage:): Lượng thời gian CPU đã được máy chủ PostgreSQL sử dụng trong quá trình đo điểm chuẩn. Disk I/O: Số lượng disk I/O được máy chủ PostgreSQL thực hiện trong quá trình đo điểm chuẩn. Dưới đây là một số mẹo sử dụng pgbench cho người mới:\nBắt đầu bằng benchmark đơn giản: Nếu bạn chưa quen với pgbench, tốt nhất nên bắt đầu bằng benchmark đơn giản, chẳng hạn như benchmark TPROC. Điều này sẽ giúp bạn làm quen với công cụ này và học cách diễn giải kết quả. Sử dụng một số lượng nhỏ client: Tốt nhất là nên bắt đầu với một số lượng nhỏ phiên client đồng thời khi chạy pgbench benchmark. Sau đó, bạn có thể tăng dần số lượng máy khách để xem hiệu suất của máy chủ PostgreSQL thay đổi như thế nào khi tải. Giám sát hiệu suất của máy chủ PostgreSQL: Khi chạy pgbench benchmark, điều quan trọng là phải giám sát hiệu suất của máy chủ PostgreSQL. Bạn có thể sử dụng các công cụ như pgAdmin hoặc pgBouncer để theo dõi các số liệu như mức sử dụng CPU, mức sử dụng bộ nhớ và I/O disk. Phân tích kết quả: Khi bạn đã chạy pgbench benchmark , điều quan trọng là phải phân tích kết quả. Điều này sẽ giúp bạn xác định mọi tắc nghẽn về hiệu suất và thực hiện các thay đổi để cải thiện hiệu suất của máy chủ PostgreSQL. Bây giờ, chúng tôi sẽ giải thích về pgbench benchmark của bài thực hành này:\npgbench -i --fillfactor=90 --scale=500 --host=rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com --username masteruser pglab -i: tạo 4 bảng pgbench_accounts, pgbench_branches, pgbench_history, và pgbench_tellers, xóa mọi bảng hiện có của những tên này. -f (\u0026ndash;fillfactor=90): Chỉ định rằng dữ liệu thử nghiệm phải được chèn bằng hệ số lấp đầy (fill factor) là 90%. Điều này có nghĩa là mỗi trang của cơ sở dữ liệu sẽ được lấp đầy tới 90% dung lượng trước khi chuyển sang trang tiếp theo. -s (\u0026ndash;scale=500): Chỉ định rằng dữ liệu thử nghiệm phải được chia tỷ lệ gấp 500 lần kích thước của tập dữ liệu thử nghiệm mặc định -h (\u0026ndash;host=rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com): Chỉ định tên của máy chủ PostgreSQL để kết nối. -U (\u0026ndash;username=masteruser): Chỉ định tên người dùng sẽ sử dụng để kết nối với máy chủ PostgreSQL. pglab: Tên của cơ sở dữ liệu cần tạo. pgbench --host=rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com --username masteruser --protocol=prepared -P 30 --time=300 --client=200 --jobs=200 pglab -h (\u0026ndash;host=rdspg-fcj-labs.cssuddr073hp.us-east-1.rds.amazonaws.com): Chỉ định tên máy chủ của máy chủ PostgreSQL để kết nối. -U (\u0026ndash;username masteruser): Chỉ định tên người dùng sẽ sử dụng để kết nối với máy chủ PostgreSQL. -p (\u0026ndash;protocol=prepared): Chỉ định rằng các câu lệnh đã chuẩn bị sẽ được sử dụng để thực thi khối lượng công việc chuẩn. \u0026ndash;progress (-P 30): Chỉ định rằng điểm chuẩn sẽ chạy trong 30 giây. -T (\u0026ndash;time=300): Chỉ định rằng benchmark sẽ chạy trong 300 giây. -c (\u0026ndash;client=200): Chỉ định rằng 200 phiên máy khách đồng thời sẽ được sử dụng để thực thi khối lượng công việc chuẩn. -j (\u0026ndash;jobs=200): Chỉ định rằng 200 job sẽ được tạo để thực thi khối lượng công việc chuẩn. pglab: Tên của cơ sở dữ liệu cần tạo. "
},
{
	"uri": "/vi/9-cleanup/",
	"title": "Xóa tài nguyên",
	"tags": [],
	"description": "",
	"content": "\rVui lòng xóa tất cả các tài nguyên và dịch vụ mà chúng ta đã tạo và sử dụng cho bài thực hành trước đóng giao diện AWS Console\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]